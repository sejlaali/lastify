{"version":3,"sources":["Components/LandingPage.jsx","Components/OneResult.jsx","Components/ResultDetails.jsx","Components/Itunes.jsx","Components/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["LandingPage","react_default","a","createElement","id","className","react_router_dom","to","Component","dotenv","config","OneResult","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","errorImg","evt","target","src","state","name","info","img","getResults","bind","assertThisInitialized","artistName","location","option","inputVal","songInputValue","axios","get","concat","res","setState","data","artist","bio","content","then","_this2","results","artworkUrl100","onError","alt","ResultDetails","setRedirect","redirect","renderRedirect","react_router","pathname","result","artistOrSong","onClick","Number","playcount","toLocaleString","listeners","key","index","playNext","Itunes","player","preview","autoplay","controls","type","Input","handleChange","inputValue","currentTarget","value","optionSelected","allResults","handleSubmit","preventDefault","alert","url","toptracks","track","activeSearch","trackmatches","currentSong","filter","song","toUpperCase","previewUrl","topTracks","tracks","_this3","header","map","i","href","class","onChange","onSubmit","autocomplete","placeholder","Components_ResultDetails","length","Components_Itunes","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.603e2f2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\nclass LandingPage extends Component {\n  render() {\n    return (\n      <div id=\"landing-page-div\">\n        <h1>\n          LAST<span>ify</span>\n        </h1>\n        <p>Search for an artist or a song.</p>\n        <p>Preview a song.</p>\n        <p>Read artist bios.</p>\n        <div>\n          <button className=\"button-html\">\n            <Link className=\"button\" to=\"/homepage\">\n              ENTER\n            </Link>\n          </button>\n        </div>\n        <footer>Copyright &copy; Sejla Ali</footer>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport \"./Components.css\";\nimport { Link } from \"react-router-dom\";\n\ndotenv.config();\nlet key = \"1deb80ec093a9391822d243aa558d18e\"\n\nclass OneResult extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      info: \"\",\n      img: \"\"\n    };\n    this.getResults = this.getResults.bind(this);\n    this.getResults();\n  }\n\n  async getResults() {\n    const artistName =\n      this.props.location.state.option === \"artist\"\n        ? this.props.location.state.inputVal\n        : this.props.location.state.songInputValue;\n    let res = await axios.get(\n      `http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${artistName}&api_key=${key}&format=json`\n    );\n    this.setState({\n      name: res.data.artist.name,\n      info: res.data.artist.bio.content\n    });\n\n    axios.get(`https://itunes.apple.com/search?term=${artistName}`).then(res =>\n      this.setState({\n        img: res.data.results[0].artworkUrl100\n      })\n    );\n  }\n\n  errorImg = evt => {\n    evt.target.src =\n      \"https://images.pexels.com/photos/167092/pexels-photo-167092.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=60&w=120\";\n  };\n\n  render() {\n    let info =\n      this.state.info === \"\" ? (\n        <h5 className=\"artist-info-empty\">\n          No info available for this artist.\n        </h5>\n      ) : (\n        <h5 className=\"artist-info\">{this.state.info}</h5>\n      );\n    return (\n      <div id=\"one-result-div\">\n        <h1>{this.state.name}</h1>\n        <img src={this.state.img} onError={this.errorImg} alt=\"album\" />\n        {info}\n        <Link to=\"/homepage\">\n          <i className=\"material-icons back-home\">keyboard_arrow_left</i>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default OneResult;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Components.css\";\n\nclass ResultDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: \"\",\n      img: \"\"\n    };\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    });\n  };\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return (\n        <Redirect\n          to={{\n            pathname: \"/target\",\n            state: {\n              inputVal: this.props.result.artist.name,\n              songInputValue: this.props.result.artist,\n              option: this.props.option\n            }\n          }}\n        />\n      );\n    }\n  };\n\n  render() {\n    const artistOrSong =\n      this.props.option === \"artist\" ? (\n        <div>\n          <h5 className=\"result-artist\" onClick={this.setRedirect}>\n            {this.props.result.artist.name}\n          </h5>\n          <p>\n            Playcount:{\" \"}\n            {Number(this.props.result.playcount).toLocaleString(\"en\")}\n          </p>{\" \"}\n        </div>\n      ) : (\n        <div>\n          <h5 className=\"result-artist\" onClick={this.setRedirect}>\n            {this.props.result.artist}\n          </h5>\n          <p>\n            Listeners:{\" \"}\n            {Number(this.props.result.listeners).toLocaleString(\"en\")}\n          </p>\n        </div>\n      );\n\n    return (\n      <div className=\"song-parts\" key={this.props.index}>\n        {this.renderRedirect()}\n        <i\n          onClick={() => [this.props.playNext(this.props.result)]}\n          className=\"play-song material-icons\"\n        >\n          play_arrow\n        </i>\n        <h4>{this.props.result.name}</h4>\n        {artistOrSong}\n      </div>\n    );\n  }\n}\n\nexport default ResultDetails;\n","import React, { Component } from \"react\";\nimport \"./Components.css\";\n\nclass Itunes extends Component {\n    render() {\n      const player = this.props.preview\n    return (\n    <div>\n        <video className=\"media-player\" autoplay controls src={player} type=\"audio/m4a\">\n        </video>\n    </div>\n    );\n  }\n}\n\nexport default Itunes;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport ResultDetails from \"./ResultDetails\";\nimport \"./Components.css\";\nimport Itunes from \"./Itunes\";\nimport { Link } from \"react-router-dom\";\n\ndotenv.config();\nlet key = \"1deb80ec093a9391822d243aa558d18e\"\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputValue: \"\",\n      allResults: [],\n      artist: \"\",\n      activeSearch: false,\n      topTracks: [],\n      option: \"artist\",\n      currentSong: \"\",\n      preview: \"\"\n    };\n  }\n\n  handleChange = evt => {\n    this.setState({\n      inputValue: evt.currentTarget.value\n    });\n  };\n\n  optionSelected = evt => {\n    this.setState({\n      option: evt.currentTarget.value,\n      inputValue: \"\",\n      allResults: []\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    if (this.state.inputValue === \"\")\n      alert(`Please type in either an artist or song name for results`);\n    else {\n      if (this.state.option === \"artist\") {\n        let url = `http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${\n          this.state.inputValue\n        }&api_key=${key}&limit=36&format=json`;\n        axios.get(url).then(res => {\n          res.data.toptracks\n            ? this.setState({\n                allResults: res.data.toptracks.track,\n                activeSearch: true\n              })\n            : alert(\"Please check your spelling\");\n        });\n      } else {\n        let url = `http://ws.audioscrobbler.com/2.0/?method=track.search&track=${\n          this.state.inputValue\n        }&api_key=${key}&limit=36&format=json`;\n        axios.get(url).then(res => {\n          res.data.results.trackmatches\n            ? this.setState({\n                allResults: res.data.results.trackmatches.track,\n                activeSearch: true\n              })\n            : alert(\"Please check your spelling\");\n        });\n      }\n    }\n  };\n\n  componentDidMount() {\n    const url = `http://ws.audioscrobbler.com/2.0/?method=chart.gettoptracks&api_key=${key}&format=json`;\n    axios.get(url).then(res => {\n      this.setState({\n        topTracks: res.data.tracks.track\n      });\n    });\n  }\n\n  playNext = result => {\n    this.setState(\n      {\n        currentSong: result\n      },\n      () => {\n        axios\n          .get(\n            `https://itunes.apple.com/search?term=${\n              this.state.currentSong.name\n            }`\n          )\n          .then(res => {\n            this.setState({\n              artist: this.state.currentSong.artist.name\n                ? this.state.currentSong.artist.name\n                : this.state.currentSong.artist\n            });\n            let filter = res.data.results.filter(song => {\n              return (\n                song.artistName.toUpperCase() == this.state.artist.toUpperCase()\n              );\n            });\n            this.setState({\n              preview: filter[0].previewUrl\n            });\n          });\n      }\n    );\n  };\n\n  render() {\n    const header = this.state.preview ? (\n      <h3>Currently Playing: {this.state.currentSong.name}</h3>\n    ) : (\n      <h3 />\n    );\n    const topTracks = this.state.topTracks.map((track, i) => (\n      <li key={i}>\n        {track.name}\n        <h5>{track.artist.name}</h5>\n      </li>\n    ));\n\n    return (\n      <div className=\"input\">\n        <nav>\n          <Link className=\"title\" to=\"/\">\n            <h1>\n              LAST<span>ify</span>\n            </h1>\n          </Link>\n          <ul>\n            <li>\n              <a target=\"blank\" href=\"https://www.last.fm/home\">\n                Last.fm\n              </a>\n            </li>\n            <li>\n              <a target=\"blank\" href=\"https://www.spotify.com/is/\">\n                Spotify\n              </a>\n            </li>\n            <li>\n              <a target=\"blank\" href=\"https://www.apple.com/itunes/\">\n                iTunes\n              </a>\n            </li>\n          </ul>\n        </nav>\n        <hr />\n        {header}\n        <div className=\"header\">\n          <select class=\"styled-select\" onChange={this.optionSelected}>\n            <option value=\"artist\">Artist</option>\n            <option value=\"song\">Song</option>\n          </select>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              autocomplete=\"off\"\n              type=\"text\"\n              name=\"song\"\n              value={this.state.inputValue}\n              placeholder=\"Search for an artist or song\"\n              onChange={this.handleChange}\n            />\n            <button type=\"submit\">ENTER</button>\n          </form>\n        </div>\n        <div id=\"song-results\">\n          {this.state.allResults.map((result, i) => (\n            <ResultDetails\n              result={result}\n              index={i}\n              option={this.state.option}\n              inputValue={this.state.artist}\n              playNext={this.playNext}\n            />\n          ))}\n        </div>\n\n        {this.state.allResults.length <= 0 ? (\n          <div className=\"top-tracks\">\n            <h2>\n              TOP TRACKS OF 2019\n              <i className=\"music material-icons\">library_music</i>\n            </h2>\n            <ol className=\"top-track-details\"> {topTracks}</ol>\n          </div>\n        ) : (\n          <div />\n        )}\n        <Itunes preview={this.state.preview} />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport LandingPage from \"./Components/LandingPage\";\nimport OneResult from \"./Components/OneResult\";\nimport Input from \"./Components/Input\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route exact path=\"/homepage\" component={Input} />\n        <Route exact path=\"/target\" component={OneResult} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}